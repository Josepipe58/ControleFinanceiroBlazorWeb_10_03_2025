@page "/categorias/excluir"

<PageTitle>ExcluirCategoria</PageTitle>
<hr style="color:blue"/>
<h1 style="color:blue">Excluir Ano</h1>

<p style="color:red">Tem certeza de que deseja excluir esse item?</p>
<div>
    <hr style="color:blue" />
    @if (Categoria is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Código</dt>
            <dd class="col-sm-10">@Categoria.FiltrarCategoriaId</dd>

            <dt class="col-sm-2">Nome do Filtro</dt>
            <dd class="col-sm-10">@Categoria.NomeDoFiltro</dd>

            <dt class="col-sm-2">Código</dt>
            <dd class="col-sm-10">@Categoria.Id</dd>

            <dt class="col-sm-2">Nome da Categoria</dt>
            <dd class="col-sm-10">@Categoria.NomeDaCategoria</dd>
        </dl>
        <EditForm method="post" Model="Categoria" OnValidSubmit="Excluir" FormName="FormExcluir" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Categoria is null)">Excluir</button> |
            <a href="/anos">Voltar para a listagem de categorias.</a>
        </EditForm>
    }
</div>

@code {
    private Categoria Categoria;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        Categoria = await _categoriaService.ObterCategoriaPorId(Id);
        if (Categoria.Id <= 0)
        {
            NavigationManager.NavigateTo($"Erro ao excluir a categoria informado.");
        }
    }

    private async Task Excluir()
    {
        await _categoriaService.ExcluirCategoria(Id);
        NavigationManager.NavigateTo("/categorias");
    }
}
